from sqlalchemy import select
from models.marketplace_model import Marketplace
from database.sessionmaker import Session
from services.inventory_services import take_item, give_item
from services.economy_services import add_gold, remove_gold
from utils.custom_errors import VeyraError, NotEnoughGoldError
from utils.embeds.marketplaceembed import build_marketplace
from utils.emotes import GOLD_EMOJI




def create_listing(user_id: int, item_id: int, quantity: int, price: int) -> int:
    """
    Create a new listing for an item on the marketplace.

    Args:
        user_id (int): ID of the user creating the listing.
        item_id (int): ID of the item to be listed.
        quantity (int): Quantity of the item to be listed. Must be >= 1.
        price (int): Price per item.

    Returns:
        int: The new listing’s autogenerated ID.
             Returns 0 if the user doesn’t have enough items to submit as escrow.
    """
    try:
        take_item(user_id, item_id, quantity)
    except VeyraError:
        return 0

    with Session() as session:
        new_listing = Marketplace(
            user_id=user_id,
            item_id=item_id,
            quantity=quantity,
            price=price
        )
        session.add(new_listing)
        session.commit()
        session.refresh(new_listing)  # Load generated listing_id
        return new_listing.listing_id


def buy_listed_item(buyer_id: int, listing_id: int, quantity: int):
    """
    Attempt to buy a listed item from the marketplace.

    Args:
        buyer_id (int): The ID of the buyer.
        listing_id (int): The listing ID to purchase from.
        quantity (int): Number of items to purchase.

    Returns:
        str: Result message (success or error).
    """
    with Session() as session:
        listing = session.get(Marketplace, listing_id)
        if not listing:
            return f"There is currently no listing available with ID {listing_id}"

        items_in_stock = listing.quantity
        if quantity > items_in_stock:
            return f"Only {items_in_stock} are in stock; you can't buy {quantity}"

        item_id = listing.item_id
        item_name = listing.item.item_name
        price = listing.price
        seller_name = listing.user.user_name

        # Attempt to deduct buyer's gold
        try:
            remove_gold(buyer_id, quantity * price)
        except NotEnoughGoldError as e:
            return str(e)

        # Transfer item and gold
        give_item(buyer_id, item_id, quantity)
        add_gold(listing.user_id, quantity * price)

        # Remove or update listing
        if items_in_stock == quantity:
            session.delete(listing)
        else:
            listing.quantity -= quantity

        session.commit()
        return f"Successfully bought {quantity}×{item_name} from {seller_name} for {quantity * price} {GOLD_EMOJI}"



def fill_marketplace_list():
    """
    Fetch all current marketplace listings and build a structured list.

    Returns:
        list[dict]: List of structured listing data for rendering.
    """
    with Session() as session:
        stmt = select(Marketplace)
        listings = session.execute(stmt).scalars().all()

        marketplace_listings = []
        for listing in listings:
            marketplace_listings.append({
                'user_name': listing.user.user_name,
                'listing_id': listing.listing_id,
                'item_name': listing.item.item_name,
                'quantity': listing.quantity,
                'price': listing.price,
                'rarity': listing.item.item_rarity,
            })

        return marketplace_listings


def load_marketplace():
    """
    Build and return the marketplace embed using current listings.

    Returns:
        discord.Embed: Embed object with marketplace data.
    """
    listings = fill_marketplace_list()
    return build_marketplace(listings)
